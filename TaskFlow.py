
import tkinter as tk
from tkinter import messagebox
import ttkbootstrap as tb

# === –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ===
root = tb.Window(themename="darkly")
root.title("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")
root.geometry("900x550")
root.configure(bg="#121212")

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
FONT_TITLE = ("Poppins", 14, "bold")  # –ö—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
FONT_DESC = ("Poppins", 10, "italic")  # –ú–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è
BG_COLOR = "#121212"
FG_COLOR = "#E0E0E0"
BTN_COLOR = "#1E1E1E"
LIST_COLOR = "#1A1A1A"
MENU_COLOR = "#191919"

# ========== –§—Ä–µ–π–º—ã ==========
frame_welcome = tk.Frame(root, bg=BG_COLOR)  # –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
frame_main = tk.Frame(root, bg=BG_COLOR)  # –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω

# === –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ===
label_welcome = tk.Label(frame_welcome, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤\n–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á!",
                         font=("Poppins", 24), bg=BG_COLOR, fg=FG_COLOR)
label_welcome.pack(expand=True)

frame_welcome.pack(fill=tk.BOTH, expand=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω

# === –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é ===
menu_frame = tk.Frame(root, bg=MENU_COLOR, width=60)

def create_menu_button(icon, command):
    btn = tk.Button(menu_frame, text=icon, font=("Poppins", 14), bg=BTN_COLOR, fg=FG_COLOR,
                    relief="flat", bd=0, padx=10, pady=10, cursor="hand2",
                    activebackground="#292929", activeforeground=FG_COLOR,
                    command=command)
    btn.pack(fill=tk.X, pady=5)
    return btn

btn_tasks = create_menu_button("üìå", lambda: show_frame(frame_main))
btn_settings = create_menu_button("‚öô", lambda: messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
btn_exit = create_menu_button("üö™", root.quit)

# === –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤ ===
def show_frame(frame):
    frame_welcome.pack_forget()
    frame_main.pack_forget()
    menu_frame.pack(side=tk.LEFT, fill=tk.Y)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=30)

# === –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω ===
frame_tasks = tk.Frame(frame_main, bg=BG_COLOR)
frame_tasks.pack(fill=tk.BOTH, expand=True)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å—Ç–∏
frame_left = tk.Frame(frame_tasks, bg=BG_COLOR, width=400)
frame_right = tk.Frame(frame_tasks, bg=BG_COLOR)

frame_left.pack(side=tk.LEFT, fill=tk.BOTH, padx=10, pady=10, expand=True)
frame_right.pack(side=tk.RIGHT, fill=tk.BOTH, padx=10, pady=10, expand=True)

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
label_task = tk.Label(frame_left, text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:", font=FONT_TITLE, bg=BG_COLOR, fg=FG_COLOR)
label_task.pack(anchor="w")

entry_task = tk.Entry(frame_left, font=FONT_TITLE, bg=LIST_COLOR, fg=FG_COLOR, bd=0, relief="flat")
entry_task.pack(fill=tk.X, pady=5, ipady=5)

label_desc = tk.Label(frame_left, text="–ü–æ—è—Å–Ω–µ–Ω–∏–µ:", font=FONT_DESC, bg=BG_COLOR, fg=FG_COLOR)
label_desc.pack(anchor="w")

entry_desc = tk.Text(frame_left, font=FONT_DESC, bg=LIST_COLOR, fg=FG_COLOR, height=4, bd=0, relief="flat")
entry_desc.pack(fill=tk.X, pady=5)

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–¥–∞—á
def add_task():
    task_text = entry_task.get().strip()
    desc_text = entry_desc.get("1.0", tk.END).strip()
    if task_text:
        full_text = (task_text, desc_text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        task_list.insert(tk.END, full_text)
        entry_task.delete(0, tk.END)
        entry_desc.delete(1.0, tk.END)

def delete_task():
    selected = task_list.curselection()
    if selected:
        task_list.delete(selected[0])
    else:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

def edit_task():
    selected = task_list.curselection()
    if selected:
        task_text, desc_text = task_list.get(selected[0])
        entry_task.delete(0, tk.END)
        entry_desc.delete(1.0, tk.END)
        entry_task.insert(tk.END, task_text)
        entry_desc.insert(tk.END, desc_text)
        task_list.delete(selected[0])

# –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
def on_enter(e):
    e.widget["bg"] = "#292929"

def on_leave(e):
    e.widget["bg"] = BTN_COLOR

btn_frame = tk.Frame(frame_left, bg=BG_COLOR)
btn_frame.pack(fill=tk.X, pady=10)
def create_button(text, command):
    btn = tk.Button(btn_frame, text=text, font=FONT_TITLE, bg=BTN_COLOR, fg=FG_COLOR,
                    relief="flat", bd=0, padx=15, pady=8, cursor="hand2",
                    activebackground="#292929", activeforeground=FG_COLOR,
                    command=command)
    btn.bind("<Enter>", on_enter)
    btn.bind("<Leave>", on_leave)
    btn.pack(side=tk.LEFT, expand=True, fill=tk.X, padx=5)
    return btn

btn_add = create_button("–î–æ–±–∞–≤–∏—Ç—å", add_task)
btn_edit = create_button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", edit_task)
btn_delete = create_button("–£–¥–∞–ª–∏—Ç—å", delete_task)

# === –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ===
label_list = tk.Label(frame_right, text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", font=FONT_TITLE, bg=BG_COLOR, fg=FG_COLOR)
label_list.pack(anchor="w", pady=5)

task_list = tk.Listbox(frame_right, font=FONT_TITLE, bg=LIST_COLOR, fg=FG_COLOR,
                       selectbackground="#3A3A3A", bd=0, height=15, relief="flat")
task_list.pack(fill=tk.BOTH, expand=True, pady=5)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ ===
def format_task_display(event):
    task_list.delete(0, tk.END)  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    for task_text, desc_text in task_data:
        task_list.insert(tk.END, task_text)  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if desc_text:
            task_list.insert(tk.END, f"   {desc_text}")  # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–º –∏ –º–µ–Ω—å—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º

task_data = []
task_list.bind("<<ListboxSelect>>", format_task_display)

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
root.after(2000, lambda: show_frame(frame_main))

root.mainloop()